---
openapi: 3.0.0
info:
  title: Swagger Product
  description: |
    This is a sample Product server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.3
servers:
- url: https://virtserver.swaggerhub.com/tiboo2000/test/1.0.3
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
tags:
- name: product
  description: Everything about your Product
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Lotus orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /Product:
    post:
      tags:
      - Product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "405":
          description: Invalid input
  /Product/{ProductId}:
    get:
      tags:
      - Product
      summary: Find product by ID
      description: Find
      operationId: getProductById
      parameters:
      - name: ProductId
        in: path
        description: Product Id to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
    delete:
      tags:
      - Product
      summary: Delete a product to the store
      operationId: delProduct
      parameters:
      - name: ProductId
        in: path
        description: Product Id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
  /Product/:
    get:
      tags:
      - Product
      summary: Find Products by Category
      description: Retrieve all products with a specific 'idCategory' defined.
      operationId: findProductsByCategory
      parameters:
      - name: idCategory
        in: query
        description: The 'idCategory' to filter by
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: oeil cybern√©tique
        prix:
          type: number
          example: 1000
        id_cat:
          type: integer
          format: int64
          example: 3
  requestBodies:
    Product:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
