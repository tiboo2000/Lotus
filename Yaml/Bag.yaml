---
openapi: 3.0.0
info:
  title: User And Bag
  description: |
    Api for user info request.
  termsOfService: http://swagger.io/terms/
  contact:
    email: maximilien.zak@std.heh.be
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/maximilien.zak/User/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
tags:
- name: bag
  description: Access to bag
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /bag/{nameuser}:
    get:
      tags:
      - bag
      summary: Returns bag inventories by name of a user
      description: Returns a map of codes
      operationId: getBag
      parameters:
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bag'
        "400":
          description: Invalid Bag
  /bag/getquantity/{product}/{nameuser}:
    get:
      tags:
      - bag
      summary: Returns quantity of a product in a bag of a user
      description: Returns number of product
      operationId: getnumberprod
      parameters:
      - name: product
        in: path
        description: productobject
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Bag'
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/xml:
              schema:
                type: integer
                format: int64
        "400":
          description: Invalid Bag
  /bag/add/{nameuser}:
    post:
      tags:
      - bag
      summary: Add a bag to  user
      operationId: addbag
      parameters:
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: bag added to a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bag'
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid Bag
  /bag/delete/{nameuser}:
    delete:
      tags:
      - bag
      summary: Delete Bag of  a user
      operationId: delete bag
      parameters:
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid Bag
  /bag/delete/{product}/{nameuser}:
    delete:
      tags:
      - bag
      summary: Delete Product in Bag of  a user
      operationId: delete product in bag
      parameters:
      - name: product
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Product'
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid Bag
  /bag/update/{nameuser}:
    put:
      tags:
      - bag
      summary: Maj de la quantite de produit dans la liste deproduit du panier
      operationId: updatebag
      parameters:
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bag'
        "400":
          description: Invalid Bag
  /bag/updatequantity/{product}/{nameuser}/{quantity}:
    put:
      tags:
      - bag
      summary: Maj de la quantite de produit dans la liste deproduit du panier
      operationId: update product quantity
      parameters:
      - name: product
        in: path
        description: product information
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Product'
      - name: nameuser
        in: path
        description: name of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: quantity
        in: path
        description: new quantity
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid Bag
components:
  schemas:
    Bag:
      type: object
      properties:
        UserName:
          type: string
        ListProduct:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      xml:
        name: Bag
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
        categoryid:
          type: integer
          format: int64
      xml:
        name: Product
