[{"C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\index.js":"1","C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\App.js":"2","C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\composent\\bag.js":"3","C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\composent\\page.js":"4"},{"size":581,"mtime":1706106586395,"results":"5","hashOfConfig":"6"},{"size":543,"mtime":1706100410050,"results":"7","hashOfConfig":"6"},{"size":5039,"mtime":1706101172333,"results":"8","hashOfConfig":"6"},{"size":1158,"mtime":1706100998162,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1o7v8ns",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\index.js",["24","25"],[],"C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\App.js",["26"],[],"C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\composent\\bag.js",["27","28","29","30","31"],[],"import React from 'react';\r\nimport axios from 'axios';\r\nimport './bag.css';\r\n\r\nclass Bag extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      temp: [],\r\n      temp2: [],\r\n      tempname: [],\r\n      tempQuantity: [],\r\n      allproduct:[],\r\n      productidandquantity:[],\r\n      intfullprice : 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n  \r\n  \r\n\r\n  fetchData = async () => {\r\n    const result = await axios('http://localhost:9090/bag?user=test');\r\n    result.data.listProduct.map((product) => {\r\n        this.state.allproduct.push(product)\r\n        if (!this.state.temp.includes(product.id)){\r\n            this.state.temp.push(product.id)\r\n            this.state.temp2.push(product)\r\n            this.state.tempname.push(\"test\")//rechercher le nom de l'utilisateur dans le props pour swap d'uitilisateur et dans la requete aussi du coup\r\n        }\r\n    });\r\n    this.state.allproduct.forEach((element) => {\r\n        if (this.state.productidandquantity.includes(element.id)){\r\n            this.state.productidandquantity[this.state.productidandquantity.indexOf(element.id) + 1] = this.state.productidandquantity[this.state.productidandquantity.indexOf(element.id) + 1] + 1\r\n        }\r\n        else{\r\n            this.state.productidandquantity.push(element.id)\r\n            this.state.productidandquantity.push(1)\r\n        }\r\n    });\r\n\r\n    var temprange = this.state.productidandquantity.length\r\n    for (var i = 0; i < temprange; i = i +2) {\r\n        this.state.intfullprice = this.state.intfullprice + (this.state.productidandquantity[i] * this.state.productidandquantity[i+1])\r\n    }\r\n    this.setState({ data: this.state.temp2});\r\n    //const result2 = await axios('http://localhost:9090/bag/getquantity?id=1&name=test&price=1&categoryid=1&nameuser=test');\r\n}; \r\n\r\n\r\n    deleteProduct = async (nameuser, product) => {\r\n        try {\r\n            const response = await axios.delete('http://localhost:9090/bag/delete/product', {\r\n                params: { nameuser },\r\n                data: product\r\n            });\r\n        } catch (error) {\r\n            console.error('Failed to delete product:', error);\r\n        }\r\n    };\r\n\r\n    addinbagtest() {\r\n        axios.post('http://localhost:9090/bag/add',\r\n                {id: 1,\r\n                name: 'test',\r\n                price: 1.0,\r\n                categoryId: 1},\r\n                 {\r\n                params: {\r\n                    nameuser: \"test\"\r\n                }\r\n        })\r\n    }\r\n\r\n    changeQuantity(product,user,newquantity){\r\n        console.log(product)\r\n        try {\r\n            axios.put('http://localhost:9090/bag/update',\r\n                    {\r\n                    id: product.id,\r\n                    name: product.name,\r\n                    price: product.price,\r\n                    categoryId: product.categoryId\r\n                    },\r\n                    {\r\n                    params: {\r\n                        nameuser: user,//changer le nom de l'utilisateur\r\n                        quantity: newquantity,\r\n                        operation: \"set\"\r\n                    }\r\n            })\r\n            }\r\n        catch (error) {\r\n            console.error('Failed change quantity product:', error);\r\n        }\r\n    }\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n        <div>     \r\n        <div className=\"shopping-cart\">\r\n        <h1>Shopping Cart</h1>\r\n        <div className=\"products\">\r\n            {Array.isArray(data) && data.map((product) => (\r\n                <div key={product.id} className=\"product\">\r\n                    <div className=\"product-info\">\r\n                        <p>{product.name}</p>\r\n                        <p>ID: {product.id}</p>\r\n                        <p>Category: {product.categoryId}</p>\r\n                    </div>\r\n                    <div className=\"product-price\">\r\n                        <p>${product.price}</p>\r\n                    </div>\r\n                    <div className=\"product-quantity\">                                                                          \r\n                        <input type=\"number\" onChange={(e) => { if(e.target.value!=\"\" || e.target.value >0 )this.changeQuantity({id: product.id,name: 'test' /*changer*/,price: product.price,categoryId: product.categoryId}, \"test\", e.target.value)}} defaultValue={this.state.productidandquantity[this.state.productidandquantity.indexOf(product.id) + 1]} />\r\n                    </div>\r\n                    <div className=\"product-total\">\r\n                        <p>${product.price}</p>\r\n                    </div>\r\n                    <button onClick={() => this.deleteProduct(\"test\", product)}>Remove</button>\r\n                </div>\r\n            ))\r\n            }\r\n        </div>\r\n        <div className=\"subtotal\">\r\n            <h2>Subtotal</h2>\r\n            <p>{this.state.intfullprice}</p>\r\n        </div>\r\n        <button>Proceed to Checkout</button>\r\n        </div>\r\n        </div>\r\n    );  \r\n    }\r\n}\r\n\r\nexport default Bag;",["32"],"C:\\Users\\admin\\IdeaProjects\\Lotus\\lotusreact\\src\\composent\\page.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":11},{"ruleId":"33","severity":1,"message":"37","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":12},{"ruleId":"33","severity":1,"message":"38","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"40","line":28,"column":43,"nodeType":"41","messageId":"42","endLine":28,"endColumn":45},{"ruleId":"43","severity":1,"message":"44","line":38,"column":13,"nodeType":"45","messageId":"46","endLine":38,"endColumn":44},{"ruleId":"43","severity":1,"message":"44","line":48,"column":9,"nodeType":"45","messageId":"46","endLine":48,"endColumn":19},{"ruleId":"33","severity":1,"message":"47","line":57,"column":19,"nodeType":"35","messageId":"36","endLine":57,"endColumn":27},{"ruleId":"48","severity":1,"message":"49","line":120,"column":82,"nodeType":"50","messageId":"51","endLine":120,"endColumn":84},{"ruleId":"52","replacedBy":"53"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Page' is defined but never used.","'logo' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'response' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-new-object",["54"],"no-object-constructor"]